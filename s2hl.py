#!/usr/bin/python
#
# NAME & VERSION
#
# 	s2hl - source to human-legible game states
#	Version 1.0
#
#   2013/10/29
#   Luke Jordan
#
# DESCRIPTION
#
#	Converts a source (.s) file into a human-legible (.hl) file that
#	provides a play-by-play description of game-state changes.
#
# USAGE
#
#	./s2hl source.s > source.hl
#
# DETAILS
#
#	s2hl expects a file containing nothing but "source" (.s) records
#	created with the command specified in bsapp.
#
#	The input must not end with a newline (it shouldn't, if bevent
#	generated it).
#
#
# Bevent	Bevent          Input Row	s2hl
# Field		Field Name	    Subscript	variable
# ------	----------      ---------	--------
# 0         game id          0          NONE
# 2         inning	    	 1          inn
# 3         batting team   	 2          bat
# 4         outs	    	 3          o
# 26        first runner	 4          f
# 27        second runner	 5          s
# 28        third runner	 6          t
# 29        event text	     7          eventText
# 34        event type       8          eventType
# 40        outs on play     9          outsOnPlay
# 78        new game flag   10          newGame
# 79        end game flag   11          NOT USED

import csv
import sys

PROGNAME = "s2hl"
VERSION = "1.0"

inputFilename = sys.argv[1]
inputFile = open(inputFilename, 'rb')
inputReader = csv.reader(inputFile)

inn         = ''
bat         = ''
o           = '0'
f           = '0'
s           = '0'
t           = '0'
eventText   = ''
eventType   = ''
outsOnPlay  = ''
newGame     = ''
scoringPlay = '0'

# bevent event types
events = { '0': 'UE',    # Unknown Event
         '1': 'NE',    # No Event
         '2': 'GO',    # Generic Out
         '3': 'K',     # Strikeout
         '4': 'SB',    # Stolen Base
         '5': 'DI',    # Defensive Indifference
         '6': 'CS',    # Caught Stealing
         '7': 'EPO',   # Error on a Pick-off
         '8': 'PO',    # Pick-off
         '9': 'WP',    # Wild Pitch
        '10': 'PB',    # Passed Ball
        '11': 'BK',    # Balk
        '12': 'OA',    # Other Advance
        '13': 'EF',    # Error on a Foul
        '14': 'W',     # Walk
        '15': 'IW',    # Intentional Walk
        '16': 'HBP',   # Hit By Pitch
        '17': 'I',     # Interference
        '18': 'E',     # Error
        '19': 'FC',    # Fielder's Choice
        '20': 'S',     # Single
        '21': 'D',     # Double
        '22': 'T',     # Triple
        '23': 'HR',    # Home Run
        '24': 'MP'}    # Missing Play


print "___________________________________________\n"
print "Human-Legible version of", inputFilename
print "Generated by %s version %s." %(PROGNAME, VERSION)
print "___________________________________________"


for row in inputReader:
    newGame = row[10]
    if newGame == "T":
        print "\nSummary for %s\n" %(row[0])
        print "Inn.\tState\tTrans.\tR   O\tT.Detail"
        print "----\t-----\t------\t-   -\t--------"

        inn = row[1]
        print "^%s" %(inn),
        bat = row[2]

    else:
        if (inn != row[1]):
            inn = row[1]

        if (bat != row[2]):
            if row[2] == '0':
                print "\n^%s" %(inn),  # ^ indicates top of inning
            elif row[2] == '1':
                print "\n_%s" %(inn),  # _ indicates bottom of inning
            bat = row[2]

    if o != row[3]:
        o = row[3]

    if row[4]:
        f = 1
    elif f == 1:
        f = 0

    if row[5]:
        s = 2
    elif s == 2:
        s = 0

    if row[6]:
        t = 3
    elif t == 3:
        t = 0

    eventText = row[7]
    eventType = row[8]

    # If '-H' is part of the event text field at least one run scored.
    # Sometimes there's no '-H' in a record of a solo HR, so check that
    # if '-H' is not found.
    if (('-H' in eventText) or (eventType == '23')):
        scoringPlay = '1'
    else:
        scoringPlay = '0'

    outsOnPlay = row[9]

    print "\t\t%s%s%s%s\t" %(o, f, s, t),
    print "%s\t\t" %(events[eventType]),
    print "%s\t%s\t%s" %(scoringPlay, outsOnPlay, eventText)

inputFile.close()

